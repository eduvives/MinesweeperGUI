/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.minesweepergui.view;

import java.awt.Dimension;
import java.awt.Insets;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import javax.swing.JLabel;

/**
 *
 * @author Eduard
 */
public class ScorePanel extends javax.swing.JDialog {
    
    private String[] difficultiesNames;
    private String fileName;
    
    // Mapas para almacenar las estad√≠sticas
    Map<Integer, Integer> gamesPlayedCount;
    Map<Integer, Integer> winsCount;
    Map<Integer, Integer> longestStreak;
    Map<Integer, Integer> currentStreak;
    Map<Integer, PriorityQueue<WinRecord>> bestWins;
    
    ArrayList<JLabel> scoreLabels;
    ArrayList<JLabel> dateLabels;

    /**
     * Creates new form ScorePanel
     */
    public ScorePanel(MinesweeperPanel mainPanel, String[] difficultiesNames, String fileName) {
        super(mainPanel, "Game Scores", true);
        this.difficultiesNames = difficultiesNames;
        this.fileName = fileName;
        initComponents();
        setListenerOnClose();
        
        scoreLabels = new ArrayList<>(Arrays.asList(score1, score2, score3, score4, score5));
        dateLabels = new ArrayList<>(Arrays.asList(date1, date2, date3, date4, date5));
        
        setDifficultiesListHeight();
        setLocationRelativeTo(null);
        setResizable(false);
    }        

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        difficultiesScrollPane = new javax.swing.JScrollPane();
        difficultiesList = new javax.swing.JList<>();
        bestTimesPanel = new javax.swing.JPanel();
        score1 = new javax.swing.JLabel();
        score2 = new javax.swing.JLabel();
        score3 = new javax.swing.JLabel();
        score4 = new javax.swing.JLabel();
        score5 = new javax.swing.JLabel();
        date1 = new javax.swing.JLabel();
        date2 = new javax.swing.JLabel();
        date3 = new javax.swing.JLabel();
        date4 = new javax.swing.JLabel();
        date5 = new javax.swing.JLabel();
        scoreInfoPanel = new javax.swing.JPanel();
        currentStreakLabel = new javax.swing.JLabel();
        winStreakLabel = new javax.swing.JLabel();
        gamesWonLabel = new javax.swing.JLabel();
        gamesPlayedLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        difficultiesScrollPane.setPreferredSize(new java.awt.Dimension(100, 174));

        difficultiesList.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        difficultiesList.setModel(new javax.swing.AbstractListModel<String>() {
            public int getSize() { return difficultiesNames.length; }
            public String getElementAt(int i) { return difficultiesNames[i]; }
        });
        difficultiesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        difficultiesList.setFixedCellHeight(28);
        difficultiesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                difficultiesListValueChanged(evt);
            }
        });
        difficultiesScrollPane.setViewportView(difficultiesList);

        bestTimesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), " Best Times ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("SansSerif", 0, 14))); // NOI18N
        bestTimesPanel.setPreferredSize(new java.awt.Dimension(215, 176));

        score1.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        score1.setText("0");

        score2.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        score2.setText("0");

        score3.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        score3.setText("0");

        score4.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        score4.setText("0");

        score5.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        score5.setText("0");

        date1.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        date1.setText("00-00-0000");

        date2.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        date2.setText("00-00-0000");

        date3.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        date3.setText("00-00-0000");

        date4.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        date4.setText("00-00-0000");

        date5.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        date5.setText("00-00-0000");

        javax.swing.GroupLayout bestTimesPanelLayout = new javax.swing.GroupLayout(bestTimesPanel);
        bestTimesPanel.setLayout(bestTimesPanelLayout);
        bestTimesPanelLayout.setHorizontalGroup(
            bestTimesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bestTimesPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(bestTimesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(score1, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                    .addComponent(score2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(score3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(score4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(score5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(bestTimesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(date5)
                    .addComponent(date4)
                    .addComponent(date3)
                    .addComponent(date2)
                    .addComponent(date1))
                .addGap(35, 35, 35))
        );
        bestTimesPanelLayout.setVerticalGroup(
            bestTimesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bestTimesPanelLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(bestTimesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bestTimesPanelLayout.createSequentialGroup()
                        .addComponent(date1)
                        .addGap(8, 8, 8)
                        .addComponent(date2)
                        .addGap(8, 8, 8)
                        .addComponent(date3)
                        .addGap(8, 8, 8)
                        .addComponent(date4)
                        .addGap(8, 8, 8)
                        .addComponent(date5))
                    .addGroup(bestTimesPanelLayout.createSequentialGroup()
                        .addComponent(score1)
                        .addGap(8, 8, 8)
                        .addComponent(score2)
                        .addGap(8, 8, 8)
                        .addComponent(score3)
                        .addGap(8, 8, 8)
                        .addComponent(score4)
                        .addGap(8, 8, 8)
                        .addComponent(score5)))
                .addGap(13, 13, 13))
        );

        currentStreakLabel.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        currentStreakLabel.setText("Current winning streak:");

        winStreakLabel.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        winStreakLabel.setText("Longest winning streak:");

        gamesWonLabel.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        gamesWonLabel.setText("Games won:");

        gamesPlayedLabel.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        gamesPlayedLabel.setText("Games Played:");

        javax.swing.GroupLayout scoreInfoPanelLayout = new javax.swing.GroupLayout(scoreInfoPanel);
        scoreInfoPanel.setLayout(scoreInfoPanelLayout);
        scoreInfoPanelLayout.setHorizontalGroup(
            scoreInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scoreInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(winStreakLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(gamesWonLabel)
                .addComponent(currentStreakLabel))
            .addComponent(gamesPlayedLabel)
        );
        scoreInfoPanelLayout.setVerticalGroup(
            scoreInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scoreInfoPanelLayout.createSequentialGroup()
                .addComponent(gamesPlayedLabel)
                .addGap(18, 18, 18)
                .addComponent(gamesWonLabel)
                .addGap(18, 18, 18)
                .addComponent(winStreakLabel)
                .addGap(18, 18, 18)
                .addComponent(currentStreakLabel))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(difficultiesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(bestTimesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(scoreInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(difficultiesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bestTimesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(scoreInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void difficultiesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_difficultiesListValueChanged

        if(evt.getValueIsAdjusting()) return;
        
        int selectedIndex = difficultiesList.getSelectedIndex();
        if (selectedIndex != -1) {
            updateViewInfo(selectedIndex + 1);
        }
        
    }//GEN-LAST:event_difficultiesListValueChanged
    
    private void setListenerOnClose(){
            this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                difficultiesList.clearSelection();
            }
        });
    }
    
    private void setDifficultiesListHeight() {
        
        int rowHeight = difficultiesList.getFixedCellHeight();
        int numRows = difficultiesList.getModel().getSize();
        Insets scrollPaneInsets = difficultiesScrollPane.getInsets();

        int totalHeight = (rowHeight * numRows) + scrollPaneInsets.top + scrollPaneInsets.bottom;
        
        difficultiesScrollPane.setPreferredSize(new Dimension(100, totalHeight));

        difficultiesScrollPane.revalidate();
        difficultiesScrollPane.repaint();
        this.pack();
    }
    
    public void updateScorePanel() {
        getFileData();
        difficultiesList.setSelectedIndex(0);
    }
    
    private void getFileData() {
        
        gamesPlayedCount = new HashMap<>();
        winsCount = new HashMap<>();
        longestStreak = new HashMap<>();
        currentStreak = new HashMap<>();
        bestWins = new HashMap<>();
        
        // Inicializar los mapas para cada nivel de dificultad
        for (int i = 1; i <= difficultiesNames.length; i++) {
            gamesPlayedCount.put(i, 0);
            winsCount.put(i, 0);
            longestStreak.put(i, 0);
            currentStreak.put(i, 0);
            bestWins.put(i, new PriorityQueue<>(5, Comparator.comparingInt(WinRecord::getScore).reversed()));
        }
        
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
            String line;
            
            int currentDifficultyStreak;
            int longestDifficulStreak;
                    
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");

                boolean isWin = Boolean.parseBoolean(parts[0]);
                int difficulty = Integer.parseInt(parts[1]);
                int score = Integer.parseInt(parts[2]);
                String date = parts[3];                
                
                gamesPlayedCount.put(difficulty, gamesPlayedCount.get(difficulty) + 1);
                        
                currentDifficultyStreak = currentStreak.get(difficulty);
                longestDifficulStreak = longestStreak.get(difficulty);
                    
                if (isWin) {
                    winsCount.put(difficulty, winsCount.get(difficulty) + 1);

                    PriorityQueue<WinRecord> pq = bestWins.get(difficulty);
                    pq.offer(new WinRecord(score, date));
                    if (pq.size() > 5) {
                        pq.poll();
                    }
                    
                    currentDifficultyStreak += 1;
                    currentStreak.put(difficulty, currentDifficultyStreak);
                    longestStreak.put(difficulty, Math.max(longestDifficulStreak, currentDifficultyStreak));                    
                } else {
                    longestStreak.put(difficulty, Math.max(longestDifficulStreak, currentDifficultyStreak));                        
                    currentStreak.put(difficulty, 0);
                }
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    private void updateViewInfo(int difficulty) {
        gamesPlayedLabel.setText("Games Played: " + gamesPlayedCount.get(difficulty));
        gamesWonLabel.setText("Games won: " + winsCount.get(difficulty));
        winStreakLabel.setText("Longest winning streak: " + longestStreak.get(difficulty));
        currentStreakLabel.setText("Current winning streak: " + currentStreak.get(difficulty));
        
        PriorityQueue<WinRecord> bestWinsDifficulty = bestWins.get(difficulty);
        List<WinRecord> bestRecords = new ArrayList<>(bestWinsDifficulty);
        bestRecords.sort(Comparator.comparingInt(WinRecord::getScore));
        
        for (int i = 0; i < 5; i++) {
            if (i < bestRecords.size()) {
                WinRecord record = bestRecords.get(i);
                scoreLabels.get(i).setText(String.valueOf(record.getScore()));
                dateLabels.get(i).setText(record.getDate());
            } else {
                scoreLabels.get(i).setText("");
                dateLabels.get(i).setText("");
            }
        }
        bestTimesPanel.revalidate();
        bestTimesPanel.repaint();
        this.pack();        
    }
    
    class WinRecord {
        private final int score;
        private final String date;

        public WinRecord(int score, String date) {
            this.score = score;
            this.date = date;
        }

        public int getScore() {
            return score;
        }

        public String getDate() {
            return date;
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bestTimesPanel;
    private javax.swing.JLabel currentStreakLabel;
    private javax.swing.JLabel date1;
    private javax.swing.JLabel date2;
    private javax.swing.JLabel date3;
    private javax.swing.JLabel date4;
    private javax.swing.JLabel date5;
    private javax.swing.JList<String> difficultiesList;
    private javax.swing.JScrollPane difficultiesScrollPane;
    private javax.swing.JLabel gamesPlayedLabel;
    private javax.swing.JLabel gamesWonLabel;
    private javax.swing.JLabel score1;
    private javax.swing.JLabel score2;
    private javax.swing.JLabel score3;
    private javax.swing.JLabel score4;
    private javax.swing.JLabel score5;
    private javax.swing.JPanel scoreInfoPanel;
    private javax.swing.JLabel winStreakLabel;
    // End of variables declaration//GEN-END:variables
}
