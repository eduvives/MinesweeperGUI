/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.minesweepergui.view;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.Insets;
import java.util.Arrays;
import java.util.Locale;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author Eduard
 */
public class InfoDifficulties extends javax.swing.JDialog {

    private String[] difficultiesNames;
    private Integer [][] difficultiesParams;
    private Integer [] customDifficultyRowParams = null;
    private DefaultTableModel infoDifficultiesTableModel;
    
    /**
     * Creates new form InfoDifficulties
     */
    public InfoDifficulties(MinesweeperPanel mainPanel, String[] names, Integer [][] params) {
        super(mainPanel, "Info Difficulties", true);
        initComponents();
        initTable();
        difficultiesNames = names;
        difficultiesParams = params;
        setLocationRelativeTo(null);
        setResizable(false);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        infoDifficultiesScrollPane = new javax.swing.JScrollPane();
        infoDifficultiesTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        infoDifficultiesTable.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        infoDifficultiesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Difficulty", "Size", "Cells", "Mines", "Density (%)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        infoDifficultiesTable.setToolTipText("");
        infoDifficultiesTable.setRowHeight(38);
        infoDifficultiesTable.getTableHeader().setReorderingAllowed(false);
        infoDifficultiesScrollPane.setViewportView(infoDifficultiesTable);
        if (infoDifficultiesTable.getColumnModel().getColumnCount() > 0) {
            infoDifficultiesTable.getColumnModel().getColumn(0).setResizable(false);
            infoDifficultiesTable.getColumnModel().getColumn(1).setResizable(false);
            infoDifficultiesTable.getColumnModel().getColumn(2).setResizable(false);
            infoDifficultiesTable.getColumnModel().getColumn(3).setResizable(false);
            infoDifficultiesTable.getColumnModel().getColumn(4).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(infoDifficultiesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(infoDifficultiesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initTable() {
        infoDifficultiesTable.setFocusable(false);
        infoDifficultiesTable.setRowSelectionAllowed(false);
        
        JTableHeader tableHeader = infoDifficultiesTable.getTableHeader();
        tableHeader.setFont(new Font("SansSerif", Font.PLAIN, 14));
        tableHeader.setPreferredSize(new Dimension(tableHeader.getPreferredSize().width, 30));
        
        DefaultTableCellRenderer leftAlignRenderer = new DefaultTableCellRenderer();
        leftAlignRenderer.setHorizontalAlignment(SwingConstants.LEFT);

        for (int i = 0; i < infoDifficultiesTable.getColumnCount(); i++) {
            infoDifficultiesTable.getColumnModel().getColumn(i).setCellRenderer(leftAlignRenderer);
        }
    }
    
    public void createTable(boolean isCustomBoard) {
        infoDifficultiesTableModel = (DefaultTableModel) infoDifficultiesTable.getModel();
        for (int i = isCustomBoard ? 0 : 1; i < difficultiesNames.length; i++) {
            Object[] newRow = { difficultiesNames[i], 
                                difficultiesParams[i][0]+"×"+difficultiesParams[i][1], 
                                difficultiesParams[i][0]*difficultiesParams[i][1], 
                                difficultiesParams[i][2], 
                                String.format(Locale.US, "%.1f", (double)(difficultiesParams[i][2]*100)/(difficultiesParams[i][0]*difficultiesParams[i][1]))}; // Float.valueOf()
            // Add the row to the model
            infoDifficultiesTableModel.addRow(newRow);
        }
        if (isCustomBoard) {
            customDifficultyRowParams = Arrays.copyOf(difficultiesParams[0], difficultiesParams[0].length);
        }
        
        /*
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(infoDifficultiesTableModel);
        for (int i = 0; i < infoDifficultiesTableModel.getColumnCount(); i++) {
            sorter.setSortable(i, (i >= 2));
        }
        infoDifficultiesTable.setRowSorter(sorter);
        */
        
        updateTableHeight();
    }

    public void updateTable(boolean isCustomBoard) {
        
        int previousNumRows = infoDifficultiesTable.getRowCount();
        
        if (customDifficultyRowParams != null) {
            infoDifficultiesTableModel.removeRow(0);
        }
        if (isCustomBoard) {
            Object[] newRow = { difficultiesNames[0], 
                                    difficultiesParams[0][0]+"×"+difficultiesParams[0][1], 
                                    difficultiesParams[0][0]*difficultiesParams[0][1], 
                                    difficultiesParams[0][2], 
                                    String.format(Locale.US, "%.1f", (double)(difficultiesParams[0][2]*100)/(difficultiesParams[0][0]*difficultiesParams[0][1]))}; // Float.valueOf()
            infoDifficultiesTableModel.insertRow(0, newRow);
            customDifficultyRowParams = Arrays.copyOf(difficultiesParams[0], difficultiesParams[0].length);
        } else {
            customDifficultyRowParams = null;
        }
        if (infoDifficultiesTable.getRowCount() != previousNumRows) {
            updateTableHeight();
        }
    }
    
    private void updateTableHeight() {
        
        int rowHeight = infoDifficultiesTable.getRowHeight();
        int numRows = infoDifficultiesTable.getRowCount();
        int headerHeight = infoDifficultiesTable.getTableHeader().getPreferredSize().height;
        Insets scrollPaneInsets = infoDifficultiesScrollPane.getInsets();

        int totalHeight = (rowHeight * numRows) + headerHeight + scrollPaneInsets.top + scrollPaneInsets.bottom;
        
        infoDifficultiesScrollPane.setPreferredSize(new Dimension(450, totalHeight));
        this.pack();
    }
    
    public boolean needUpdate(boolean isCustomBoard){
        return (customDifficultyRowParams != null) != isCustomBoard || (isCustomBoard && !Arrays.equals(customDifficultyRowParams, difficultiesParams[0]));
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane infoDifficultiesScrollPane;
    private javax.swing.JTable infoDifficultiesTable;
    // End of variables declaration//GEN-END:variables
}
