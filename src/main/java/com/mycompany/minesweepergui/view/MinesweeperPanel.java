/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.minesweepergui.view;

import com.mycompany.minesweepergui.model.Minesweeper;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JButton;
import javax.swing.JOptionPane;

/**
 *
 * @author Eduard
 */
public class MinesweeperPanel extends javax.swing.JFrame {
    
    private Minesweeper game;
    private Square[][] allSquares;
    GridLayout gameSquares = new GridLayout();
    private boolean gameStarted;
    private boolean firstMoveDone;
    private int timerCount;
    private static final int MAX_SECONDS = 999;
    private Timer timer = null;
    
    private static final int EASY_ROWS = 8;
    private static final int EASY_COLS = 8;
    private static final int EASY_MINES = 10;
    private static final int MEDIUM_ROWS = 16;
    private static final int MEDIUM_COLS = 16;
    private static final int MEDIUM_MINES = 40;
    private static final int DIFFICULT_ROWS = 16;
    private static final int DIFFICULT_COLS = 30;
    private static final int DIFFICULT_MINES = 99;
    private int[] lastCustomBoardParams = null;
    
    /**
     * Creates new form MinesweeperPanel
     */
    public MinesweeperPanel() {
        game = new Minesweeper();
        initComponents();
        gameBoard.setLayout(gameSquares);
        gameSquares.setHgap(0);
        gameSquares.setVgap(0);
        newGame(cmbSelectDifficulty.getSelectedIndex());
        markedMines.setFont(new Font("SansSerif", Font.PLAIN, 20));
        timerLabel.setFont(new Font("SansSerif", Font.PLAIN, 20));
        timerPanel.setVisible(false);
        setLocationRelativeTo(null);
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gameBoard = new javax.swing.JPanel();
        shortMenuPanel = new javax.swing.JPanel();
        cmbSelectDifficulty = new javax.swing.JComboBox<>();
        markedMines = new javax.swing.JLabel();
        newBoardBtn = new javax.swing.JButton();
        repeatBoardBtn = new javax.swing.JButton();
        timerPanel = new javax.swing.JPanel();
        timerLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(404, 496));

        javax.swing.GroupLayout gameBoardLayout = new javax.swing.GroupLayout(gameBoard);
        gameBoard.setLayout(gameBoardLayout);
        gameBoardLayout.setHorizontalGroup(
            gameBoardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 371, Short.MAX_VALUE)
        );
        gameBoardLayout.setVerticalGroup(
            gameBoardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 346, Short.MAX_VALUE)
        );

        shortMenuPanel.setMinimumSize(new java.awt.Dimension(320, 79));

        cmbSelectDifficulty.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Custom", "Easy", "Medium", "Difficult" }));
        cmbSelectDifficulty.setSelectedIndex(1);
        cmbSelectDifficulty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSelectDifficultyActionPerformed(evt);
            }
        });

        markedMines.setText("üö© 0");

        newBoardBtn.setText("New Game");
        newBoardBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBoardBtnActionPerformed(evt);
            }
        });

        repeatBoardBtn.setText("Repeat Game");
        repeatBoardBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repeatBoardBtnActionPerformed(evt);
            }
        });

        timerLabel.setText("‚è± 000");

        javax.swing.GroupLayout timerPanelLayout = new javax.swing.GroupLayout(timerPanel);
        timerPanel.setLayout(timerPanelLayout);
        timerPanelLayout.setHorizontalGroup(
            timerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(timerPanelLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(timerLabel)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        timerPanelLayout.setVerticalGroup(
            timerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(timerPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(timerLabel)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout shortMenuPanelLayout = new javax.swing.GroupLayout(shortMenuPanel);
        shortMenuPanel.setLayout(shortMenuPanelLayout);
        shortMenuPanelLayout.setHorizontalGroup(
            shortMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, shortMenuPanelLayout.createSequentialGroup()
                .addComponent(cmbSelectDifficulty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(markedMines)
                .addGap(0, 0, 0)
                .addComponent(timerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(shortMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(newBoardBtn)
                    .addComponent(repeatBoardBtn)))
        );
        shortMenuPanelLayout.setVerticalGroup(
            shortMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(shortMenuPanelLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(shortMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(shortMenuPanelLayout.createSequentialGroup()
                        .addComponent(newBoardBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(repeatBoardBtn))
                    .addGroup(shortMenuPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(shortMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(timerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(shortMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(markedMines)
                                .addComponent(cmbSelectDifficulty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gameBoard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(shortMenuPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(34, 34, 34))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(shortMenuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(gameBoard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(31, 31, 31))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public class Square extends JButton {
        private int row;
        private int col;
        private int numMinesAroundPos;
        private boolean discovered;
        private boolean marked;
        private boolean disabled;
        private MouseAdapter mouseListenerCreated;
        private MouseAdapter mouseListenerDiscovered;

        private Square (int r, int c){
            row = r;
            col = c;
            discovered = false;
            marked = false;
            disabled = false;
            
            setFocusable(false);
            setMargin(new Insets(0,0,0,0));
            setPreferredSize(new Dimension(40, 40));

            setFont(new Font("SansSerif", Font.BOLD, 18));
            setBorder(null);
        }
        public int getMineRow() {
            return row;
        }
        public int getMineCol() {
            return col;
        }
        public int getNumMinesAroundPos() {
            return numMinesAroundPos;
        }
        public void setNumMinesAroundPos(int num) {
            numMinesAroundPos = num;
        }
        public boolean isDisabled() {
            return disabled;
        }
        public boolean isDiscovered() {
            return discovered;
        }
        public void setDiscovered(boolean discovered) {
            this.discovered = discovered;
        }
        public boolean isMarked() {
            return marked;
        }
        public void setMarked(boolean marked) {
            this.marked = marked;
        }
        public void addListenerCreated(){
            mouseListenerCreated = new MouseAdapter() {
                @Override
                public void mousePressed(MouseEvent e) {
                    Square mine = (Square) e.getSource();

                    if (e.getButton() == MouseEvent.BUTTON1) {
                        if (gameStarted) {
                            if (!firstMoveDone && timer != null) {
                                startTimer();
                            }
                            if(game.makeMove("üí£", mine.getMineRow(), mine.getMineCol())) {
                                gameEndPane(false, JOptionPane.ERROR_MESSAGE);
                            }
                        } else {
                            if (timer != null) {
                                startTimer();
                            }
                            game.generateMines(mine.row, mine.col);                               
                            gameStarted = true;
                        }
                    } else if (e.getButton() == MouseEvent.BUTTON3) {
                        if (gameStarted) {
                            if (!firstMoveDone && timer != null) {
                                startTimer();
                            }
                            game.makeMove("üö©", mine.getMineRow(), mine.getMineCol());
                            markedMines.setText("üö© "+(game.getNumMines()-game.getMarkedMinesNum()));
                        } else {
                            JOptionPane.showMessageDialog(null, "First select where to start","",JOptionPane.WARNING_MESSAGE);
                        }
                    }
                    if (game.checkWin()) {
                        gameEndPane(true, JOptionPane.INFORMATION_MESSAGE);

                    }
                }
            };
            addMouseListener(mouseListenerCreated);   
        }
        public void addListenerDiscovered(){
            mouseListenerDiscovered = new MouseAdapter() {
                @Override
                public void mousePressed(MouseEvent e) {
                    Square mine = (Square) e.getSource();
                    int numMinesMarkedAround = 0;
                    List<int[]> notMarkedSquaresAround = new ArrayList<>();
                    if (e.getButton() == MouseEvent.BUTTON1) {
                        for (int i = -1; i < 2; i++) {
                            for (int y = -1; y < 2; y++) {
                                if (i+row >= 0 && y+col >= 0 && i+row < game.getBoardRows() && y+col < game.getBoardCols()){
                                    if (allSquares[i+row][y+col].isMarked()) {
                                        numMinesMarkedAround++;
                                    } else if (!allSquares[i+row][y+col].isDiscovered()) {
                                        notMarkedSquaresAround.add(new int[] {i+row, y+col});
                                    }
                                }
                            }
                        }
                        if (mine.getNumMinesAroundPos() == numMinesMarkedAround) {
                            allSquares[row][col].disableSquareAll();
                            boolean boom = false;
                            for (int[] pos : notMarkedSquaresAround) {
                                boolean innerBoom = game.makeMove("üí£", pos[0], pos[1]);                                    
                                if (innerBoom && !boom){
                                    boom = true;
                                }
                            }
                            if(boom) {
                                gameEndPane(false, JOptionPane.ERROR_MESSAGE);
                            }
                        } else {
                            notMarkedSquaresAround.clear();
                       }
                    }
                }
            };
            addMouseListener(mouseListenerDiscovered);
        }
        public void disableSquare() {
            this.removeMouseListener(mouseListenerCreated);
        }
        public void disableSquareDiscovered() {
            this.removeMouseListener(mouseListenerDiscovered);
        }
        public void disableSquareAll() {
            this.removeMouseListener(mouseListenerCreated);
            this.removeMouseListener(mouseListenerDiscovered);
            disabled = true;
        }
    }
    
    private int[] getParamsBoard(int difficulty){
            switch (difficulty) {
                case 1:
                    return new int[] {EASY_ROWS, EASY_COLS, EASY_MINES};
                case 2:
                    return new int[] {MEDIUM_ROWS, MEDIUM_COLS, MEDIUM_MINES};
                case 3:
                    return new int[] {DIFFICULT_ROWS, DIFFICULT_COLS, DIFFICULT_MINES};
                default:
                    return new int[] {EASY_ROWS, EASY_COLS, EASY_MINES};
            }

    }

    private boolean checkUsesTimer(int difficulty) {
        return difficulty == 2 || difficulty == 3;
    }
   
    private void cmbSelectDifficultyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSelectDifficultyActionPerformed
        newGame(cmbSelectDifficulty.getSelectedIndex());
    }//GEN-LAST:event_cmbSelectDifficultyActionPerformed

    private void repeatBoardBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repeatBoardBtnActionPerformed
        gameReady(checkUsesTimer(cmbSelectDifficulty.getSelectedIndex()), new int[] {game.getBoardRows(), game.getBoardCols(), game.getNumMines()}, gameStarted);
    }//GEN-LAST:event_repeatBoardBtnActionPerformed

    private void newBoardBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBoardBtnActionPerformed
        newGame(cmbSelectDifficulty.getSelectedIndex());
    }//GEN-LAST:event_newBoardBtnActionPerformed

    private void newGame(int difficulty) {
        if (difficulty == 0) {
            CustomBoard secondForm = new CustomBoard(this, lastCustomBoardParams);
            secondForm.setVisible(true);
        } else {
            gameReady(checkUsesTimer(difficulty),getParamsBoard(difficulty), false);
        }
    }
    
    public void newCustomGame(int[] paramsBoard) {
        lastCustomBoardParams = paramsBoard;
        gameReady(false, paramsBoard, false);
    }
    
    private void gameReady(boolean useTimer, int[] paramsBoard, boolean repeat) {
        resetGameSquaresBoard();
        gameStarted = repeat;
        firstMoveDone = false;
        game.startGame(paramsBoard[0], paramsBoard[1], paramsBoard[2], repeat);
        markedMines.setText("üö© "+(game.getNumMines()-game.getMarkedMinesNum()));
        if(timer != null){
            timer.cancel();
        }
        setTimer(useTimer);
        gameSquares.setRows(game.getBoardRows());
        gameSquares.setColumns(game.getBoardCols());
        allSquares = new Square[game.getBoardRows()][game.getBoardCols()];
        game.setUserBoard(allSquares);
        
        for(int i=0; i<gameSquares.getRows(); i++){
            for(int y=0; y<gameSquares.getColumns(); y++){
                Square mine = new Square(i,y);
                allSquares[i][y] = mine;
                mine.addListenerCreated();
                gameBoard.add(mine);
            }
        }
        this.pack();
        this.setVisible(true);
    }
    
    private void gameEndPane(boolean isWin, int msgType) {
        if(timer != null){
            timer.cancel();
        }
        String[] options = {"New game","Repeat game","Examine board", "Exit"};
        int selectedOption;
        String message;
        if (isWin) {
            message = "Congratulations!";
            if(timer != null){
                message += "\r\nYour time was " + timerCount + " seconds.";                
            }
        } else {
            message = "Boom!";
        }
        selectedOption = JOptionPane.showOptionDialog(null, message, "", JOptionPane.DEFAULT_OPTION, msgType, null, options, options[3]);
        switch (selectedOption) {
            case 0:
                newGame(cmbSelectDifficulty.getSelectedIndex());
                break;
            case 1:
                gameReady(checkUsesTimer(cmbSelectDifficulty.getSelectedIndex()), new int[] {game.getBoardRows(), game.getBoardCols(), game.getNumMines()}, true);
                break;
            case 3:
                this.dispose();
                System.exit(0);
                break;
        }
    }
            
    private void resetGameSquaresBoard() {
        gameBoard.removeAll();
        gameBoard.revalidate();
        gameBoard.repaint();
    }
    
    private void setTimer(boolean useTimer) {
        if(timer == null) {
            if (useTimer){
                timer = new Timer();
                timerPanel.setVisible(true);
            }
        } else {
            if (useTimer){
                timer = new Timer();
            } else {
                timerPanel.setVisible(false);
                timer = null;
            }
        }
        if (timer != null) {
            timerLabel.setText("‚è± 000");
            timerCount = 0;
        }
    }
    
    private void startTimer() {
        firstMoveDone = true;
        TimerTask tarea = new TimerTask() {
            @Override
            public void run() {
                System.out.println(timerCount);
                timerCount++;
                if (timerCount <= MAX_SECONDS) {
                    timerLabel.setText("‚è± " + String.format("%03d", timerCount));
                }
            }
        };
        // Schedule the timer to run every second (1000 ms)
        timer.scheduleAtFixedRate(tarea, 1000, 1000);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MinesweeperPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MinesweeperPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MinesweeperPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MinesweeperPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MinesweeperPanel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbSelectDifficulty;
    private javax.swing.JPanel gameBoard;
    private javax.swing.JLabel markedMines;
    private javax.swing.JButton newBoardBtn;
    private javax.swing.JButton repeatBoardBtn;
    private javax.swing.JPanel shortMenuPanel;
    private javax.swing.JLabel timerLabel;
    private javax.swing.JPanel timerPanel;
    // End of variables declaration//GEN-END:variables
}
