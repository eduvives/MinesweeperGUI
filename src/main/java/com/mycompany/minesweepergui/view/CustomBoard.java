/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.minesweepergui.view;

import java.awt.Color;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author Eduard
 */
public class CustomBoard extends javax.swing.JDialog {

    private MinesweeperPanel mainPanel;
    private Color originalBackgroundColor;
    private static final int MIN_ROWS = 8;
    private static final int MAX_ROWS = 22;
    private static final int MIN_COLS = 8;
    private static final int MAX_COLS = 46;
    private static final int MIN_MINES = 1;
    private int maxMines;
    private boolean validRows = false;
    private boolean validCols = false;
    private boolean validMines = false;
    private static final Color INVALID_FIELD = new Color(254,218,218);
    private static final Color VALID_LABEL = new Color(115, 115, 115);
    private static final Color INVALID_LABEL = new Color(255,0,0);
    
    /**
     * Creates new form customBoard
     */
    public CustomBoard(MinesweeperPanel mainPanel, int[] lastCustomBoardParams) {
        super(mainPanel, "Custom Board", true);
        this.mainPanel = mainPanel;
        initComponents();
        rowsInfoLabel.setText("min " + MIN_ROWS + " - max " + MAX_ROWS);
        colsInfoLabel.setText("min " + MIN_COLS + " - max " + MAX_COLS);
        minesInfoLabel.setText("min ? - max ?");
        if (lastCustomBoardParams != null) {
            rowsField.setText(String.valueOf(lastCustomBoardParams[0]));
            colsField.setText(String.valueOf(lastCustomBoardParams[1]));
            minesField.setText(String.valueOf(lastCustomBoardParams[2]));
            updateInfoLabelsRows();
            updateInfoLabelsCols();
            updateInfoLabelsMines();
        }
        originalBackgroundColor = rowsField.getBackground();
        setFieldsListeners();
        setLocationRelativeTo(null);
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rowsLabel = new javax.swing.JLabel();
        colsLabel = new javax.swing.JLabel();
        minesLabel = new javax.swing.JLabel();
        rowsField = new javax.swing.JTextField();
        colsField = new javax.swing.JTextField();
        minesField = new javax.swing.JTextField();
        rowsInfoLabel = new javax.swing.JLabel();
        colsInfoLabel = new javax.swing.JLabel();
        minesInfoLabel = new javax.swing.JLabel();
        acceptBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        rowsLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rowsLabel.setText("Rows");

        colsLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        colsLabel.setText("Columns");

        minesLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        minesLabel.setText("Mines");

        rowsField.setColumns(3);
        rowsField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rowsField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        rowsField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rowsFieldActionPerformed(evt);
            }
        });

        colsField.setColumns(3);
        colsField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        colsField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        colsField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colsFieldActionPerformed(evt);
            }
        });

        minesField.setColumns(3);
        minesField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        minesField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        minesField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minesFieldActionPerformed(evt);
            }
        });

        rowsInfoLabel.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        rowsInfoLabel.setForeground(new java.awt.Color(115, 115, 115));
        rowsInfoLabel.setText("min 4 - max 22");

        colsInfoLabel.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        colsInfoLabel.setForeground(new java.awt.Color(115, 115, 115));
        colsInfoLabel.setText("min 4 - max 46");

        minesInfoLabel.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        minesInfoLabel.setForeground(new java.awt.Color(115, 115, 115));
        minesInfoLabel.setText("min 1 - max 9999");
        minesInfoLabel.setMaximumSize(new java.awt.Dimension(38, 16));

        acceptBtn.setText("OK");
        acceptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(colsLabel)
                            .addComponent(minesLabel)
                            .addComponent(rowsLabel))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(colsField)
                            .addComponent(rowsField)
                            .addComponent(minesField))
                        .addGap(40, 40, 40))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(rowsInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(colsInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(minesInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(acceptBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rowsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rowsLabel))
                .addGap(4, 4, 4)
                .addComponent(rowsInfoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(colsLabel)
                    .addComponent(colsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addComponent(colsInfoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minesLabel)
                    .addComponent(minesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addComponent(minesInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(acceptBtn)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void rowsFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rowsFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rowsFieldActionPerformed

    private void colsFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colsFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_colsFieldActionPerformed

    private void minesFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minesFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_minesFieldActionPerformed

    private void acceptBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptBtnActionPerformed
        if(validRows && validCols && validMines) {
            mainPanel.newCustomGame(new int[] {Integer.parseInt(rowsField.getText()), Integer.parseInt(colsField.getText()), Integer.parseInt(minesField.getText())});
            this.dispose();
        } else {
            if (validRows) {
                rowsField.setBackground(originalBackgroundColor);
            } else {
               rowsField.setBackground(INVALID_FIELD);
            }
            if (validCols) {
                colsField.setBackground(originalBackgroundColor);
            } else {
                colsField.setBackground(INVALID_FIELD);
            }
            if (validRows && validCols) {
                if (validMines) {
                    minesField.setBackground(originalBackgroundColor);
                } else {
                    minesField.setBackground(INVALID_FIELD);
                }
            }
        }
    }//GEN-LAST:event_acceptBtnActionPerformed

    private void setFieldsListeners(){
        rowsField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent e) {
            }
            @Override
            public void removeUpdate(DocumentEvent e) {
                updateInfoLabelsRows();
            }
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateInfoLabelsRows();
            }
        });
        colsField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent e) {
            }
            @Override
            public void removeUpdate(DocumentEvent e) {
                updateInfoLabelsCols();
            }
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateInfoLabelsCols();
            }
        });
        minesField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent e) {
            }
            @Override
            public void removeUpdate(DocumentEvent e) {
                updateInfoLabelsMines();
            }
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateInfoLabelsMines();
            }
        });
    }
    
    private void updateInfoLabelsRows() {
        rowsField.setBackground(originalBackgroundColor);
        if(!rowsField.getText().isEmpty()) {
            try {
                int number = Integer.parseInt(rowsField.getText());
                validRows = !(number < MIN_ROWS || number > MAX_ROWS);
            } catch (NumberFormatException e) {
                validRows = false;
            } finally {
                if (validRows) {
                    rowsInfoLabel.setForeground(VALID_LABEL);
                } else {
                    rowsInfoLabel.setForeground(INVALID_LABEL);
                }
                updateRowsColsInfoLabelsMines();
            }
        } else {
            rowsInfoLabel.setForeground(VALID_LABEL);
        }
    }
    private void updateInfoLabelsCols() {
        colsField.setBackground(originalBackgroundColor);
        if(!colsField.getText().isEmpty()) {
            try {
                int number = Integer.parseInt(colsField.getText());
                validCols = !(number < MIN_COLS || number > MAX_COLS);
            } catch (NumberFormatException e) {
                validCols = false;
            } finally {
                if (validCols) {
                        colsInfoLabel.setForeground(VALID_LABEL);
                    } else {
                        colsInfoLabel.setForeground(INVALID_LABEL);
                    }
                updateRowsColsInfoLabelsMines();
            }
        } else {
            colsInfoLabel.setForeground(VALID_LABEL);
        }
    }
    private void updateInfoLabelsMines() {
        minesField.setBackground(originalBackgroundColor);
        if(!minesField.getText().isEmpty() && validRows && validCols) {
            try {
                int number = Integer.parseInt(minesField.getText());
                validMines = !(number < MIN_MINES || number > maxMines);
            } catch (NumberFormatException e) {
                validMines = false;
            } finally {
                if (validMines) {
                    minesInfoLabel.setForeground(VALID_LABEL);
                } else {
                    minesInfoLabel.setForeground(INVALID_LABEL);
                }               
            } 
        } else {
            minesInfoLabel.setForeground(VALID_LABEL);
        }
    }
    private void updateRowsColsInfoLabelsMines() {
        if (!validRows || !validCols) {
            validMines = false;
            minesInfoLabel.setText("min ? - max ?");
            minesInfoLabel.setForeground(VALID_LABEL);
        } else {
            maxMines = Integer.parseInt(rowsField.getText()) * Integer.parseInt(colsField.getText()) - 9;
            minesInfoLabel.setText("min " + MIN_MINES + " - max " + maxMines);
            updateInfoLabelsMines();
        }
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptBtn;
    private javax.swing.JTextField colsField;
    private javax.swing.JLabel colsInfoLabel;
    private javax.swing.JLabel colsLabel;
    private javax.swing.JTextField minesField;
    private javax.swing.JLabel minesInfoLabel;
    private javax.swing.JLabel minesLabel;
    private javax.swing.JTextField rowsField;
    private javax.swing.JLabel rowsInfoLabel;
    private javax.swing.JLabel rowsLabel;
    // End of variables declaration//GEN-END:variables
}
