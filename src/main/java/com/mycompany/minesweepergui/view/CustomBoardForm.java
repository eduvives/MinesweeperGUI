/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.minesweepergui.view;

import java.awt.Color;
import java.text.DecimalFormat;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;

/**
 *
 * @author Eduard
 */
public class CustomBoardForm extends javax.swing.JDialog {

    private MinesweeperPanel mainPanel;
    
    // Declaración e inicialización de los filtros
    private static final DocumentFilter integerFilter = new DocumentFilter() {
        @Override
        public void insertString(FilterBypass fb, int offset, String string, AttributeSet attr) throws BadLocationException {
            if (string.matches("\\d*")) {
                super.insertString(fb, offset, string, attr);
            }
        }

        @Override
        public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {
            if (text.matches("\\d*")) {
                super.replace(fb, offset, length, text, attrs);
            }
        }
    };

    private static final DocumentFilter decimalFilter = new DocumentFilter() {
        @Override
        public void insertString(FilterBypass fb, int offset, String string, AttributeSet attr) throws BadLocationException {
            if (string.matches("[\\d,.]*")) {
                super.insertString(fb, offset, string, attr);
            }
        }

        @Override
        public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {
            if (text.matches("[\\d,.]*")) {
                super.replace(fb, offset, length, text, attrs);
            }
        }
    };

    private static final int MIN_ROWS = 8;
    private static final int MAX_ROWS = 100;
    private static final int MIN_COLS = 8;
    private static final int MAX_COLS = 100;
    private static final int MIN_MINES = 1;
    private int maxMines;
    private static final int MIN_DENSITY = 0;
    private static final int MAX_DENSITY = 100;
    
    private Integer rowsNumValue = null;
    private Integer colsNumValue = null;
    private Integer minesNumValue = null;
    private Double densityNumValue = null;
    
    private boolean cmbSelectedItemMines; // El valor false índica que está seleccionado el ítem Density
    
    private Color originalBackgroundColor;
    private static final Color INVALID_FIELD = new Color(254,218,218);
    private static final Color VALID_LABEL = new Color(115, 115, 115);
    private static final Color INVALID_LABEL = new Color(240,0,0);
    
    /**
     * Creates new form customBoard
     */
    public CustomBoardForm(MinesweeperPanel mainPanel, Integer[] previousCustomBoardParams) {
        super(mainPanel, "Create Custom Board", true);
        this.mainPanel = mainPanel;
        initComponents();
        rowsInfoLabel.setText("min " + MIN_ROWS + " - max " + MAX_ROWS);
        colsInfoLabel.setText("min " + MIN_COLS + " - max " + MAX_COLS);
        minesInfoLabel.setText("min ? - max ?");
        
        updateCmbSelectedItemMines();
        configureTextFieldFilters();
        
        originalBackgroundColor = rowsField.getBackground();
        setFieldsListeners();
        
        if (previousCustomBoardParams != null) {
            rowsField.setText(String.valueOf(previousCustomBoardParams[0]));
            colsField.setText(String.valueOf(previousCustomBoardParams[1]));
            minesField.setText(String.valueOf(previousCustomBoardParams[2]));
        }
        
        pack();
        setLocationRelativeTo(null);
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rowsLabel = new javax.swing.JLabel();
        colsLabel = new javax.swing.JLabel();
        rowsField = new javax.swing.JTextField();
        colsField = new javax.swing.JTextField();
        minesField = new javax.swing.JTextField();
        rowsInfoLabel = new javax.swing.JLabel();
        colsInfoLabel = new javax.swing.JLabel();
        minesInfoLabel = new javax.swing.JLabel();
        acceptBtn = new javax.swing.JButton();
        cmbMinesInput = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        rowsLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rowsLabel.setText("Rows");

        colsLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        colsLabel.setText("Columns");

        rowsField.setColumns(3);
        rowsField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rowsField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        rowsField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rowsFieldActionPerformed(evt);
            }
        });

        colsField.setColumns(3);
        colsField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        colsField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        colsField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colsFieldActionPerformed(evt);
            }
        });

        minesField.setColumns(3);
        minesField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        minesField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        minesField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minesFieldActionPerformed(evt);
            }
        });

        rowsInfoLabel.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        rowsInfoLabel.setForeground(new java.awt.Color(115, 115, 115));
        rowsInfoLabel.setText("min 8 - max 100");

        colsInfoLabel.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        colsInfoLabel.setForeground(new java.awt.Color(115, 115, 115));
        colsInfoLabel.setText("min 8 - max 100");

        minesInfoLabel.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        minesInfoLabel.setForeground(new java.awt.Color(115, 115, 115));
        minesInfoLabel.setText("min 1 - max 9999");
        minesInfoLabel.setMaximumSize(new java.awt.Dimension(38, 16));

        acceptBtn.setFont(new java.awt.Font("Segoe UI", 0, 13));
        acceptBtn.setText("OK");
        acceptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptBtnActionPerformed(evt);
            }
        });

        cmbMinesInput.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cmbMinesInput.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mines", "Density" }));
        cmbMinesInput.setFocusable(false);
        cmbMinesInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMinesInputActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(rowsInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(colsInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(minesInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbMinesInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rowsLabel)
                                    .addComponent(colsLabel))))
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(colsField)
                            .addComponent(rowsField)
                            .addComponent(minesField))
                        .addGap(45, 45, 45))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(acceptBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rowsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rowsLabel))
                .addGap(4, 4, 4)
                .addComponent(rowsInfoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(colsLabel)
                    .addComponent(colsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addComponent(colsInfoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbMinesInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addComponent(minesInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(acceptBtn)
                .addGap(22, 22, 22))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void rowsFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rowsFieldActionPerformed
        acceptBtnActionPerformed(evt);
    }//GEN-LAST:event_rowsFieldActionPerformed

    private void colsFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colsFieldActionPerformed
        acceptBtnActionPerformed(evt);
    }//GEN-LAST:event_colsFieldActionPerformed

    private void minesFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minesFieldActionPerformed
        acceptBtnActionPerformed(evt);
    }//GEN-LAST:event_minesFieldActionPerformed

    private void acceptBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptBtnActionPerformed
        if(isValidValue(rowsNumValue) && isValidValue(colsNumValue) && isValidValue(minesNumValue)) {
            mainPanel.newCustomGame(new int[] {rowsNumValue, colsNumValue, minesNumValue});
            this.dispose();
        } else {
            if (isValidValue(rowsNumValue)) {
                rowsField.setBackground(originalBackgroundColor);
            } else {
               rowsField.setBackground(INVALID_FIELD);
            }
            if (isValidValue(colsNumValue)) {
                colsField.setBackground(originalBackgroundColor);
            } else {
                colsField.setBackground(INVALID_FIELD);
            }
            if (cmbSelectedItemMines && isValidValue(rowsNumValue) && isValidValue(colsNumValue)) {
                if (isValidValue(minesNumValue)) {
                    minesField.setBackground(originalBackgroundColor);
                } else {
                    minesField.setBackground(INVALID_FIELD);
                }
            } else if (!cmbSelectedItemMines) {
                if (isValidValue(densityNumValue)) {
                    minesField.setBackground(originalBackgroundColor);
                } else {
                    minesField.setBackground(INVALID_FIELD);
                }
            }
        }
    }//GEN-LAST:event_acceptBtnActionPerformed

    private void cmbMinesInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMinesInputActionPerformed
        
        updateCmbSelectedItemMines();
        updateMinesFieldFilter();

        if (cmbSelectedItemMines) {
            
            updateRangeInfoLabelsMines();
            
            if (isValidValue(densityNumValue) && isValidValue(rowsNumValue) && isValidValue(colsNumValue)) { 
                minesField.setText(String.valueOf(Math.max(MIN_MINES, Math.min(maxMines, (int) Math.round(densityNumValue * (rowsNumValue * colsNumValue) / 100)))));
                // El propio método setText llama seguidamente a los métodos removeUpdate e insertUpdate, por lo que no es necesario llamar 
                // a updateInfoLabelsMinesValid de forma explícita en esta parte del código.
            } else {
                updateInfoLabelsMinesValid();
            }
            
        } else {
            minesInfoLabel.setText("min " + MIN_DENSITY + " - max " + MAX_DENSITY);
            
            if (isValidValue(minesNumValue) && isValidValue(rowsNumValue) && isValidValue(colsNumValue)) {
                DecimalFormat df = new DecimalFormat("#.##");
                minesField.setText(df.format((double)(minesNumValue*100)/(rowsNumValue * colsNumValue)));
                // El propio método setText llama seguidamente a los métodos removeUpdate e insertUpdate, por lo que no es necesario llamar 
                // a updateInfoLabelsDensityValid de forma explícita en esta parte del código.
            } else {
                updateInfoLabelsDensityValid();
            }
        }
    }//GEN-LAST:event_cmbMinesInputActionPerformed

    private void applyDocumentFilter(JTextField textField, DocumentFilter filter) {
        ((AbstractDocument) textField.getDocument()).setDocumentFilter(filter);
    }
    
    private void configureTextFieldFilters() {
        // Aplicar filtro de solo enteros
        applyDocumentFilter(rowsField, integerFilter);
        applyDocumentFilter(colsField, integerFilter);
        
        // Aplicar filtro dinámico (para enteros o decimales) a minesField basado en el valor de cmbMinesInput
        updateMinesFieldFilter();
    }
    
    private void updateCmbSelectedItemMines() {
        cmbSelectedItemMines = String.valueOf(cmbMinesInput.getSelectedItem()).equals("Mines");
    }
    
    private void updateMinesFieldFilter() {
        applyDocumentFilter(minesField, cmbSelectedItemMines ? integerFilter : decimalFilter);
    }
    
    private void setFieldsListeners(){
        rowsField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent e) {
            }
            @Override
            public void removeUpdate(DocumentEvent e) {
                updateInfoLabelsRowsValid();
            }
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateInfoLabelsRowsValid();
            }
        });
        colsField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent e) {
            }
            @Override
            public void removeUpdate(DocumentEvent e) {
                updateInfoLabelsColsValid();
            }
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateInfoLabelsColsValid();
            }
        });
        minesField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent e) {
            }
            @Override
            public void removeUpdate(DocumentEvent e) {
                if (cmbSelectedItemMines) {
                    updateInfoLabelsMinesValid();
                } else {
                    updateInfoLabelsDensityValid();
                }                
            }
            @Override
            public void insertUpdate(DocumentEvent e) {
                if (cmbSelectedItemMines) {
                    updateInfoLabelsMinesValid();
                } else {
                    updateInfoLabelsDensityValid();
                }
            }
        });
    }
    
    // Method to check if an input of the number of rows, columns, mines or density is valid. It will be valid as long as its value is not null.
    private boolean isValidValue(Object value) {
        return value != null;
    }
    
    private void updateInfoLabelsRowsValid() {
        rowsField.setBackground(originalBackgroundColor);
        String rowsFieldText = rowsField.getText().trim();
        if(!rowsFieldText.isEmpty()) {
            try {
                int rowsNumber = Integer.parseInt(rowsFieldText);
                rowsNumValue = !(rowsNumber < MIN_ROWS || rowsNumber > MAX_ROWS) ? rowsNumber : null;
            } catch (NumberFormatException e) {
                rowsNumValue = null;
            } finally {
                if (isValidValue(rowsNumValue)) {
                    rowsInfoLabel.setForeground(VALID_LABEL);
                } else {
                    rowsInfoLabel.setForeground(INVALID_LABEL);
                }
            }
        } else {
            rowsNumValue = null;
            rowsInfoLabel.setForeground(VALID_LABEL);
        }
        if (cmbSelectedItemMines) {
            updateRangeInfoLabelsMines();
            updateInfoLabelsMinesValid();
        }
    }
    private void updateInfoLabelsColsValid() {
        colsField.setBackground(originalBackgroundColor);
        String colsFieldText = colsField.getText().trim();
        if(!colsFieldText.isEmpty()) {
            try {
                int colsNumber = Integer.parseInt(colsFieldText);
                colsNumValue = !(colsNumber < MIN_COLS || colsNumber > MAX_COLS) ? colsNumber : null;
            } catch (NumberFormatException e) {
                colsNumValue = null;
            } finally {
                if (isValidValue(colsNumValue)) {
                        colsInfoLabel.setForeground(VALID_LABEL);
                    } else {
                        colsInfoLabel.setForeground(INVALID_LABEL);
                    }                                
            }
        } else {
            colsNumValue = null;
            colsInfoLabel.setForeground(VALID_LABEL);
        }
        
        if (cmbSelectedItemMines) {
            updateRangeInfoLabelsMines();
            updateInfoLabelsMinesValid();
        }
    }
    private void updateInfoLabelsMinesValid() {
        minesField.setBackground(originalBackgroundColor);
        String minesFieldText = minesField.getText().trim();
        if(!minesFieldText.isEmpty() && isValidValue(rowsNumValue) && isValidValue(colsNumValue)) {
            try {
                int minesNumber = Integer.parseInt(minesFieldText);
                minesNumValue = !(minesNumber < MIN_MINES || minesNumber > maxMines) ? minesNumber : null;
            } catch (NumberFormatException e) {
                minesNumValue = null;
            } finally {
                if (isValidValue(minesNumValue)) {
                    minesInfoLabel.setForeground(VALID_LABEL);
                } else {
                    minesInfoLabel.setForeground(INVALID_LABEL);
                }               
            } 
        } else {
            minesNumValue = null;
            minesInfoLabel.setForeground(VALID_LABEL);
        }
    }
    private void updateInfoLabelsDensityValid() {
        minesField.setBackground(originalBackgroundColor);
        String minesFieldText = minesField.getText().trim().replace(',', '.');
        if(!minesFieldText.isEmpty()) {
            try {
                double densityNumber = Double.parseDouble(minesFieldText);
                densityNumValue = !(densityNumber < MIN_DENSITY || densityNumber > MAX_DENSITY) ? densityNumber : null;
            } catch (NumberFormatException e) {
                densityNumValue = null;
            } finally {
                if (isValidValue(densityNumValue)) {
                    minesInfoLabel.setForeground(VALID_LABEL);
                } else {
                    minesInfoLabel.setForeground(INVALID_LABEL);
                }               
            } 
        } else {
            densityNumValue = null;
            minesInfoLabel.setForeground(VALID_LABEL);
        }
        
        minesNumValue = (isValidValue(densityNumValue) && isValidValue(rowsNumValue) && isValidValue(colsNumValue)) ? 
                Math.max(MIN_MINES, Math.min(maxMines, (int) Math.round(densityNumValue * (rowsNumValue * colsNumValue) / 100))) : null;
    }
    private void updateRangeInfoLabelsMines() {
        if (!isValidValue(rowsNumValue) || !isValidValue(colsNumValue)) {
            minesNumValue = null;
            minesInfoLabel.setText("min ? - max ?");
            minesInfoLabel.setForeground(VALID_LABEL);
            minesField.setBackground(originalBackgroundColor);
        } else {
            maxMines = rowsNumValue * colsNumValue - 9;
            minesInfoLabel.setText("min " + MIN_MINES + " - max " + maxMines);
        }
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptBtn;
    private javax.swing.JComboBox<String> cmbMinesInput;
    private javax.swing.JTextField colsField;
    private javax.swing.JLabel colsInfoLabel;
    private javax.swing.JLabel colsLabel;
    private javax.swing.JTextField minesField;
    private javax.swing.JLabel minesInfoLabel;
    private javax.swing.JTextField rowsField;
    private javax.swing.JLabel rowsInfoLabel;
    private javax.swing.JLabel rowsLabel;
    // End of variables declaration//GEN-END:variables
}
